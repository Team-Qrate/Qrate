generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Message {
  id        String   @id @default(uuid())
  text      String
  userId    String   @db.Uuid
  roomId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  room      Room?    @relation(fields: [roomId], references: [id])
  profile   Profile  @relation(fields: [userId], references: [userId])
}

model Room {
  id                    String                  @id @default(uuid())
  maxUser               Int
  area                  String
  mealType              String
  date                  String
  isClosed              Boolean
  createdAt             DateTime                @default(now())
  Message               Message[]
  RecommendedRestaurant RecommendedRestaurant[] @relation("RecommendedRestaurantRoom")
  RoomParticipant       RoomParticipant[]
}

model RoomParticipant {
  id     String  @id @default(uuid())
  roomId String
  userId String  @db.Uuid
  isHost Boolean
  room   Room    @relation(fields: [roomId], references: [id])
  profile Profile @relation(fields: [userId], references: [userId]) 
}

model Restaurant {
  id                    String                  @id @default(uuid())
  name                  String
  url                   String
  genre                 String
  area                  String
  station               String
  distance              String
  description           String
  rating                Float
  reviewCount           Int
  savedCount            Int
  budgetDinner          String
  budgetLunch           String
  isHotRestaurant       Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  RecommendedRestaurant RecommendedRestaurant[]
}

model RecommendedRestaurant {
  id              String     @id @default(uuid())
  recommendReason String
  matchScore      Int
  userId          String     @db.Uuid
  roomId          String?
  restaurantId    String
  isSelected      Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id])
  room            Room?      @relation("RecommendedRestaurantRoom", fields: [roomId], references: [id])
  profile         Profile    @relation(fields: [userId], references: [userId])
}

model Profile {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String                  @unique @db.Uuid
  name                  String?
  avatarUrl             String?
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  
  Message               Message[]
  RecommendedRestaurant RecommendedRestaurant[]
  RoomParticipant       RoomParticipant[]  

  @@map("profiles")
}
